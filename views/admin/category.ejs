<div class="container">
    <!-- List Container -->
    <div class="list-container">
        <div class="list-header">
            <h2>Danh Sách Thể Loại Dịch Vụ</h2>
            <button onclick="openAddModal()">Thêm Thể Loại Dịch Vụ</button>
        </div>
        <table id="categoryProductList">
            <thead>
                <tr>
                    <th>Tên</th>
                    <th>Mô tả</th>
                    <th>Ảnh</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                <!-- Categories will be listed here -->
            </tbody>
        </table>
        <div id="pagination" class="pagination"></div>
    </div>

    <!-- Modal for Editing Category Product -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEditModal()">&times;</span>
            <h2>Sửa Thể Loại Sản Phẩm</h2>
            <form id="editForm">
                <label for="editName">Tên Thể Loại Sản Phẩm</label>
                <input type="text" id="editName" placeholder="Nhập tên category product" required>

                <label for="editDescription">Mô tả</label>
                <input type="text" id="editDescription" placeholder="Nhập mô tả" required>

                <label for="editStatus">Trạng thái</label>
                <select id="editStatus" class="input-field" required>
                    <option value="true">Hiển thị</option>
                    <option value="false">Ẩn</option>
                </select>

                <label for="editImage">Ảnh</label>
                <input type="file" id="editImage">

                <button type="submit">Cập nhật</button>
            </form>
        </div>
    </div>

    <!--Modal for Adding Product-->
    <div id="categoryProductModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddModal()">&times;</span>
            <h2>Thêm Mới Category Product</h2>
            <form id="categoryProductForm">
                <label for="name">Tên Category Product</label>
                <input type="text" id="name" placeholder="Nhập tên category product" required>

                <label for="description">Mô tả</label>
                <input type="text" id="description" placeholder="Nhập mô tả" required>

                <label for="status">Trạng thái</label>
                <select id="status" class="input-field" required>
                    <option value="true">Hiển thị</option>
                    <option value="false">Ẩn</option>
                </select>

                <label for="image">Ảnh</label>
                <input type="file" id="image" required>

                <button type="submit">Thêm Category Product</button>
            </form>
        </div>
    </div>
</div>
<script type="text/javascript">
    const apiUrl = 'api/categoryProducts/get_list_Category_Product';
    let categoryProducts = [];
    let currentPage = 1;
    const limit = 5;
    var addModal = document.getElementById("categoryProductModal");
    var editModal = document.getElementById("editModal");
    var closeBtn = document.getElementById("closeModal")

    function openAddModal() {
        editModal.style.display = "none";
        addModal.style.display = "flex";
    }

    function closeAddModal() {
        const modal = document.getElementById('categoryProductModal');
        if (modal) {
            modal.style.display = "none";
        } else {
            console.error("Add Modal not found!");
        }
    }

    function closeEditModal() {
        const modal = document.getElementById('editModal');
        if (modal) {
            modal.style.display = "none";
        } else {
            console.error("Edit Modal not found!");
        }
    }

    function fetchCategoryProducts() {
        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                categoryProducts = data
                renderCategoryProduct()
                renderPagination()
            })
            .catch(error => console.error('Error fetching category products:', error));
    }

    function renderCategoryProduct() {
        const categoryProductList = document.getElementById('categoryProductList').getElementsByTagName('tbody')[0];
        categoryProductList.innerHTML = '';
        const startIndex = (currentPage - 1) * limit;
        const endIndex = startIndex + limit;
        const paginatedServices = categoryProducts.slice(startIndex, endIndex);

        paginatedServices.forEach(categoryProduct => {
            const row = document.createElement('tr');
            row.innerHTML = `
                        <td>${categoryProduct.name}</td>
                        <td>${truncateText(categoryProduct.description, 50)}</td>
                        <td><img src="${categoryProduct.image}" alt="${categoryProduct.name}" width="100"></td>
                        <td>${categoryProduct.status ? 'Hiển thị' : 'Ẩn'}</td>
                        <td>
                            <div style="button-group">
                                <button class="btn-edit" onclick="openEditModal('${categoryProduct._id}', '${categoryProduct.name}', '${categoryProduct.description}', '${categoryProduct.status}', '${categoryProduct.image}')">Sửa</button>
                                <button class="btn-delete" onclick="deleteCategoryProduct('${categoryProduct._id}')">Ẩn</button>
                            </div>
                        </td>
                    `;
            categoryProductList.appendChild(row);
        });
    }

    function renderPagination() {
        const paginationContainer = document.getElementById('pagination');
        paginationContainer.innerHTML = '';

        const totalPages = Math.ceil(categoryProducts.length / limit);

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.innerText = i;
            pageButton.className = i === currentPage ? 'active' : '';
            pageButton.onclick = () => {
                currentPage = i;
                renderCategoryProduct(); // Render selected page
            };
            paginationContainer.appendChild(pageButton);
        }
    }

    // Handle adding new category product
    const categoryProductForm = document.getElementById('categoryProductForm');
    categoryProductForm.addEventListener('submit', function (e) {
        e.preventDefault();

        const name = document.getElementById('name').value;
        const description = document.getElementById('description').value;
        const status = document.getElementById('status').value === 'true';
        const image = document.getElementById('image').files[0];

        const formData = new FormData();
        formData.append('name', name);
        formData.append('description', description);
        formData.append('status', status);
        formData.append('image', image);

        fetch('api/categoryProducts/add_category_product', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                fetchCategoryProducts();
                categoryProductForm.reset();
            })
            .catch(error => console.error('Error adding category product:', error));
    });

    function truncateText(text, maxLength) {
        if (text.length > maxLength) {
            return text.substring(0, maxLength) + '...';
        }
        return text;
    }


    // Handle edit category product modal
    function openEditModal(id, name, description, status, image) {
        document.getElementById('editName').value = name;
        document.getElementById('editDescription').value = description;
        document.getElementById('editStatus').value = status ? 'true' : 'false';
        document.getElementById('editImage').value = '';

        const modal = document.getElementById('editModal');
        modal.style.display = "flex";

        const editForm = document.getElementById('editForm');
        editForm.onsubmit = function (e) {
            e.preventDefault();

            const updatedName = document.getElementById('editName').value;
            const updatedDescription = document.getElementById('editDescription').value;
            const updatedStatus = document.getElementById('editStatus').value === 'true';
            const updatedImage = document.getElementById('editImage').files[0];

            const formData = new FormData();
            formData.append('name', updatedName);
            formData.append('description', updatedDescription);
            formData.append('status', updatedStatus);
            if (updatedImage) formData.append('image', updatedImage);

            fetch(`api/categoryProducts/update_category_product/${id}`, {
                method: 'PUT',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    fetchCategoryProducts();
                    modal.style.display = "none";
                })
                .catch(error => console.error('Error updating category product:', error));
        };
    }
    function deleteCategoryProduct(id) {
        fetch(`api/categoryProducts/delete_category_product/${id}`, {
            method: 'DELETE'
        })
            .then(response => response.json())
            .then(data => {
                fetchCategoryProducts();
            })
            .catch(error => console.error('Error deleting category product:', error));
    }

    window.onload = fetchCategoryProducts;
</script>
<div class="container">
    <!-- List Container -->
    <div class="list-container">
        <div class="list-header">
            <h2>Danh Sách Dịch Vụ</h2>
            <button onclick="openAddModal()">Thêm Dịch Vụ</button>
        </div>
        <table id="serviceList">
            <thead>
                <tr>
                    <th>Tên</th>
                    <th>Danh mục</th>
                    <th>Mô tả</th>
                    <th>Giá</th>
                    <th>Thời lượng</th>
                    <th>Ảnh</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody>
                <!-- Services will be listed here -->
            </tbody>
        </table>
        <div id="pagination" class="pagination"></div>

    </div>

    <div id="serviceModal" class="modal">
        <!-- Modal Content -->
        <div class="modal-content">
            <span class="close-btn" id="closeModal">&times;</span>
            <h2>Thêm Mới Dịch Vụ</h2>
            <form id="serviceForm">
                <label for="name">Tên Dịch Vụ</label>
                <input type="text" id="name" placeholder="Nhập tên dịch vụ" required>

                <label for="id_category">Danh mục</label>
                <select id="id_category" required>
                    <!-- Dynamic category options will be populated here -->
                </select>

                <label for="description">Mô tả</label>
                <input type="text" id="description" placeholder="Nhập mô tả">

                <label for="price">Giá</label>
                <input type="number" id="price" placeholder="Nhập giá" min="0" required>

                <label for="duration">Thời lượng (phút)</label>
                <input type="number" id="duration" placeholder="Nhập thời lượng" min="0" required>

                <label for="images">Ảnh</label>
                <input type="file" id="images" required>

                <button type="submit">Thêm Dịch Vụ</button>
            </form>
        </div>
    </div>

    <!-- Modal for Editing Service -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Sửa Dịch Vụ</h2>
            <form id="editForm">
                <label for="editName">Tên Dịch Vụ</label>
                <input type="text" id="editName" placeholder="Nhập tên dịch vụ" required>

                <label for="editIdCategory">Danh mục</label>
                <select id="editIdCategory" required>
                    <!-- Dynamic category options will be populated here -->
                </select>

                <label for="editDescription">Mô tả</label>
                <input type="text" id="editDescription" placeholder="Nhập mô tả">

                <label for="editPrice">Giá</label>
                <input type="number" id="editPrice" placeholder="Nhập giá" min="0" required>

                <label for="editDuration">Thời lượng (phút)</label>
                <input type="number" id="editDuration" placeholder="Nhập thời lượng" min="0" required>

                <label for="editImages">Ảnh</label>
                <div class="image-container">
                    <input type="file" accept="image/png, image/jpeg, image/jpg" id="editFileInput" name="anhSanPham"
                        style="display:none" />
                    <input type="text" id="editFileChosen" placeholder="Chọn Ảnh Sản Phẩm" readonly />
                    <button type="button" class="imageButton" onclick="triggerFileInput()">Chọn Ảnh</button>
                </div>


                <button type="submit">Cập nhật</button>
            </form>
        </div>
    </div>
</div>
<script type="text/javascript">
    const apiUrl = 'api/services/get_list_service';
    let services = []; // To store all services
    let currentPage = 1;
    const limit = 5; // Number of items per page
    var addModal = document.getElementById("serviceModal");
    var editModal = document.getElementById("editModal");
    var closeBtn = document.getElementById("closeModal")

    // Fetch categories for dropdown
    function fetchCategories() {
        fetch('api/categorys/get_list_category')
            .then(response => response.json())
            .then(data => {
                const categorySelect = document.getElementById('id_category');
                const editCategorySelect = document.getElementById('editIdCategory');
                categorySelect.innerHTML = '';
                editCategorySelect.innerHTML = '';

                data.forEach(category => {
                    const option = `<option value="${category._id}">${category.name}</option>`;
                    categorySelect.innerHTML += option;
                    editCategorySelect.innerHTML += option;
                });
            })
            .catch(error => console.error('Error fetching categories:', error));
    }

    function fetchServices() {
        fetch(apiUrl)
            .then(response => response.json())
            .then(data => {
                services = data; // Store fetched data
                renderServices(); // Render the first page
                renderPagination();
            })
            .catch(error => console.error('Error fetching services:', error));
    }

    // Render services for the current page
    function renderServices() {
        const serviceList = document.getElementById('serviceList').getElementsByTagName('tbody')[0];
        serviceList.innerHTML = '';

        const startIndex = (currentPage - 1) * limit;
        const endIndex = startIndex + limit;
        const paginatedServices = services.slice(startIndex, endIndex);

        paginatedServices.forEach(service => {
            const row = document.createElement('tr');
            row.innerHTML = `
            <td>${truncateText(service.name, 50)}</td>
            <td>${service.id_category.name}</td>
            <td>${truncateText(service.description, 50)}</td>
            <td>${service.price}</td>
            <td>${service.duration}</td>
            <td><img src="${service.images}" alt="${service.name}" width="50"></td>
            <td>${service.status ? 'Hiển thị' : 'Ẩn'}</td>
            <td>
                <div style="display: flex;flex-direction: row">
                    <button class="btn-edit" onclick="openEditModal('${service._id}', '${service.name}', '${service.id_category._id}', '${service.description}', ${service.price}, ${service.duration}, '${service.images}', ${service.status})">Sửa</button>
                    <button class="btn-delete" onclick="deleteService('${service._id}')">Xóa</button>
                </div>
            </td>
        `;
            serviceList.appendChild(row);
        });
    }

    // Render pagination controls
    function renderPagination() {
        const paginationContainer = document.getElementById('pagination');
        paginationContainer.innerHTML = '';

        const totalPages = Math.ceil(services.length / limit);

        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('button');
            pageButton.innerText = i;
            pageButton.className = i === currentPage ? 'active' : '';
            pageButton.onclick = () => {
                currentPage = i;
                renderServices(); // Render selected page
            };
            paginationContainer.appendChild(pageButton);
        }
    }

    // Add new service
    const serviceForm = document.getElementById('serviceForm');
    serviceForm.addEventListener('submit', function (e) {
        e.preventDefault();

        const formData = new FormData(serviceForm);
        fetch('api/services/add_service', {
            method: 'POST',
            body: formData
        })
            .then(response => response.json())
            .then(data => {
                fetchServices();
                serviceForm.reset();
            })
            .catch(error => console.error('Error adding service:', error));
    });

    function truncateText(text, maxLength) {
        if (text.length > maxLength) {
            return text.substring(0, maxLength) + '...';
        }
        return text;
    }

    // Edit service modal
    function openEditModal(id, name, id_category, description, price, duration, images, status) {
        document.getElementById('editName').value = name;
        document.getElementById('editIdCategory').value = id_category;
        document.getElementById('editDescription').value = description;
        document.getElementById('editPrice').value = price;
        document.getElementById('editDuration').value = duration;

        // Display current image file name in the visible input
        document.getElementById('editFileChosen').value = images.split('/').pop(); // Extract file name from path
        document.getElementById('editFileInput').value = null; // Clear file input for new selection

        // Open the modal
        const modal = document.getElementById('editModal');
        modal.style.display = "flex"; // Ensure modal is visible and styled properly

        // Attach submission handler for the edit form
        const editForm = document.getElementById('editForm');
        editForm.onsubmit = function (e) {
            e.preventDefault();

            // Collect updated data
            const updatedData = new FormData(editForm);

            // Perform the update request
            fetch(`api/services/update_service/${id}`, {
                method: 'PUT',
                body: updatedData,
            })
                .then(response => response.json())
                .then(data => {
                    fetchServices(); // Refresh the service list
                    modal.style.display = "none"; // Close modal on success
                })
                .catch(error => console.error('Error updating service:', error));
        };
    }

    function triggerFileInput() {
        const fileInput = document.getElementById('editFileInput');
        fileInput.click();

        // Update visible text input with the selected file name
        fileInput.onchange = () => {
            const fileName = fileInput.files[0]?.name || "Chưa chọn tệp";
            document.getElementById('editFileChosen').value = fileName;
        };
    }

    function closeModal() {
        const modal = document.getElementById('editModal');
        modal.style.display = "none"; // Ensure modal closes properly
    }

    function openAddModal() {
        addModal.style.display = "block";
        editModal.style.display = "none";
    }

    function closeAddModal() {
        addModal.style.display = "none";
    }

    // Close edit modal
    function closeEditModal() {
        editModal.style.display = "none";
    }


    function deleteService(id) {
        fetch(`api/services/delete_service/${id}`, {
            method: 'DELETE'
        })
            .then(response => response.json())
            .then(data => {
                fetchServices();
            })
            .catch(error => console.error('Error deleting service:', error));
    }

    // Initialize page
    window.onload = function () {
        fetchCategories();
        fetchServices();
    };
    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            closeAddModal();
        }
    }

</script>